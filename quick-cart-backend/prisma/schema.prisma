generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String    @unique
  avatar              String?
  password            String
  phoneNumber         String?
  address             String?
  deliveryAddresses   Address[]
  role                String    @default("CUSTOMER")
  businessName        String?
  storeId             String?   @db.ObjectId
  createdAt           DateTime  @default(now())
  resetPasswordToken  String?
  resetPasswordTime   DateTime?
  securityCode        String?
  securityCodeExpires DateTime?

  store   Store?  @relation("UserStore")
}

model Address {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  mobileNo   String
  street     String
  city       String?
  state      String
  landmark   String
  postalCode String?
  default    Boolean @default(false)
  userId     String  @db.ObjectId
  user       User    @relation(fields: [userId], references: [id])
}

model Store {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  businessName String
  phoneNumber  String
  email        String
  address      String
  city         String
  state        String
  ownerId      String   @db.ObjectId @unique
  products     Product[]

  owner        User     @relation("UserStore", fields: [ownerId], references: [id])
}

model Product {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  images        String[]
  price         Float
  discountPrice Float?       @map("discount_price")
  categoryId    String      @db.ObjectId
  subcategoryId String      @db.ObjectId
  condition     String
  storeId       String      @db.ObjectId
  variations    Variation[]
  ratings       Rating[]
  featured      Boolean
  totalSale     Int?        @map("total_sale")
  stock         Int
  brand         String?
  lastUpdated   DateTime    @default(now())

  category      Category    @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  store         Store       @relation(fields: [storeId], references: [id])
}

model Variation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  options     String[]
  productId   String @db.ObjectId

  product     Product @relation(fields: [productId], references: [id])
}

model Rating {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  user        String
  rating      Float
  comment     String
  productId   String @db.ObjectId

  product     Product @relation(fields: [productId], references: [id])
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  subTitle      String
  imageUrl      String?
  subcategories Subcategory[] @relation("CategorySubcategories")
  products      Product[]
}

model Subcategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  imageUrl    String?
  categoryId  String    @db.ObjectId
  category    Category @relation("CategorySubcategories", fields: [categoryId], references: [id])
  products    Product[]
}
