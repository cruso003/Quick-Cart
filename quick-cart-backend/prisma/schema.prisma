generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String    @unique
  avatar              String?
  password            String
  phoneNumber         String?
  address             String?
  city                String?
  state               String?
  deliveryAddresses   Address[]
  role                String    @default("CUSTOMER")
  businessName        String?
  storeId             String?   @db.ObjectId
  createdAt           DateTime  @default(now())
  resetPasswordToken  String?
  resetPasswordTime   DateTime?
  securityCode        String?
  securityCodeExpires DateTime?
  isApproved          Boolean   @default(false)
  approvalToken       String?

  store Store? @relation("UserStore")

  Cart Cart[]

  Order Order[]

  Wallet Wallet[]

  sentMessages      Message[] @relation("Sender")
  receivedMessages  Message[] @relation("Receiver")
}


model PickupStation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  addressId String   @db.ObjectId
  address   Address  @relation(fields: [addressId], references: [id])
}

model Address {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  mobileNo      String
  street        String
  city          String?
  state         String
  landmark      String
  postalCode    String?
  default       Boolean         @default(false)
  userId        String          @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  pickupStation PickupStation[]
}


model Store {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  businessName String
  phoneNumber  String
  email        String
  address      String
  city         String
  state        String
  ownerId      String    @unique @db.ObjectId
  products     Product[]

  owner User @relation("UserStore", fields: [ownerId], references: [id])

  OrderProduct OrderProduct[]
}

model Product {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  images        String[]
  price         Float
  discountPrice Float?      @map("discount_price")
  categoryId    String      @db.ObjectId
  subcategoryId String      @db.ObjectId
  condition     String
  storeId       String      @db.ObjectId
  variations    Variation[]
  ratings       Rating[]
  featured      Boolean
  totalSale     Int?        @map("total_sale")
  stock         Int
  brand         String?
  lastUpdated   DateTime    @default(now())

  category    Category          @relation(fields: [categoryId], references: [id])
  subcategory Subcategory       @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  store       Store             @relation(fields: [storeId], references: [id])
  banners     BannerOnProduct[]

  CartItem CartItem[]

  OrderProduct OrderProduct[]
}

model Variation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  options   String[]
  productId String   @db.ObjectId

  product Product @relation(fields: [productId], references: [id])

  VariationSelection VariationSelection[]
}

model Banner {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  imageUrl       String
  linkedProducts BannerOnProduct[]
}

model BannerOnProduct {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  bannerId  String @db.ObjectId
  productId String @db.ObjectId

  banner  Banner  @relation(fields: [bannerId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([bannerId, productId])
}

model Rating {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  user      String
  rating    Float
  comment   String
  productId String @db.ObjectId

  product Product @relation(fields: [productId], references: [id])
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  subTitle      String
  imageUrl      String?
  subcategories Subcategory[] @relation("CategorySubcategories")
  products      Product[]
}

model Subcategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  imageUrl   String?
  categoryId String    @db.ObjectId
  category   Category  @relation("CategorySubcategories", fields: [categoryId], references: [id], onDelete: Cascade)
  products   Product[]
}

model Cart {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
  userId String  @db.ObjectId
  items  CartItem[]

  @@index([userId])
}

model CartItem {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity          Int
  checked           Boolean
  selectedVariations Json?
  shipmentOption    String?
  deliveryFee       Float?
  selectedCity      String?
  selectedState     String?
  selectedPickupStation String?
  selectedAddress   String?
  discountPrice     Float?
  productId         String   @db.ObjectId
  cartId            String   @db.ObjectId

  product Product @relation(fields: [productId], references: [id])
  cart    Cart    @relation(fields: [cartId], references: [id])

  VariationSelection VariationSelection[]
}

model VariationSelection {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  variation        Variation @relation(fields: [variationId], references: [id])
  variationId      String    @db.ObjectId
  selectedOption   String
  cartItemId       String    @db.ObjectId
  cartItem         CartItem  @relation(fields: [cartItemId], references: [id])
}

model Order {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  products       OrderProduct[]
  userId         String         @db.ObjectId
  user           User           @relation(fields: [userId], references: [id])
  status         String         @default("Pending")
  trackingNumber String?
  orderDate      DateTime       @default(now())
  paymentId      String?        @db.ObjectId @unique

  payment        OrderPayment?  @relation("OrderPayment")
}

model OrderPayment {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String  @db.ObjectId @unique
  order         Order?  @relation("OrderPayment", fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  amount        Float
  transactionId String  @default(uuid())
}

model OrderProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  orderId   String   @db.ObjectId
  storeId   String   @db.ObjectId
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])
}

model Wallet {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @db.ObjectId @unique
  user    User    @relation(fields: [userId], references: [id])
  balance Float   @default(0.0)
}

model PaymentMethod {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  method       String  @unique
  displayName  String
  provider     String
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  sentAt     DateTime @default(now())
  isRead     Boolean  @default(false)

  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([sentAt])
}
